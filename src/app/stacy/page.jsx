"use client";

import { Text3D, useAnimations, useGLTF, useTexture } from "@react-three/drei";
import { Canvas, extend, useFrame } from "@react-three/fiber";
import { easing } from "maath";
import { Suspense, useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { PlaneGeometry } from "three";

extend({ PlaneGeometry });
function Rig() {
  return useFrame((state, delta) => {
    easing.damp3(
      state.camera.position,
      [1 + state.mouse.x / 4, 1.5 + state.mouse.y / 4, 2.5],
      0.2,
      delta
    );
  });
}

export default function About() {
  const [index, setIndex] = useState(0);
  const [queue, setQueue] = useState(null);

  const playCombo = () => {
    setQueue([0, 1, 2]);
  };

  return (
    <>
      <Canvas shadows camera={{ position: [1, 1.5, 2.5], fov: 50 }}>
        <ambientLight />
        <directionalLight
          position={[-5, 5, 5]}
          castShadow
          shadow-mapSize={1024}
        />
        <group position={[0, -1, 0]}>
          <Suspense fallback={<LoaderOverlay />}>
            <Model
              index={index}
              setIndex={setIndex}
              queue={queue}
              setQueue={setQueue}
            />
          </Suspense>
        </group>
        <mesh
          rotation={[-0.5 * Math.PI, 0, 0]}
          position={[0, -1, 0]}
          receiveShadow
        >
          <planeGeometry args={[10, 10, 1, 1]} />
          <shadowMaterial transparent opacity={0.2} />
        </mesh>
        <Rig />
      </Canvas>

      <div style={{ position: "absolute", top: 20, left: 20 }}>
        <button
          className="bg-sky-500 hover:bg-sky-700"
          onClick={() => setIndex(0)}
        >
          Idle
        </button>
        <button
          className="bg-sky-500 hover:bg-sky-700"
          onClick={() => setIndex(1)}
        >
          Jalan
        </button>
        <button
          className="bg-sky-500 hover:bg-sky-700"
          onClick={() => setIndex(2)}
        >
          Lompat
        </button>
        <button className="bg-sky-500 hover:bg-sky-700" onClick={playCombo}>
          Combo (Idle â†’ Lompat)
        </button>
      </div>
    </>
  );
}

/*
This file was generated by https://github.com/pmndrs/gltfjsx and then
customized manually. It uses drei's new useAnimations hook which extracts
all actions and sets up a THREE.AnimationMixer for it so that you don't have to.
All of the assets actions, action-names and clips are available in its output. 
*/

function Model({ index, setIndex, queue, setQueue, ...props }) {
  const halo = useRef();
  const texture = useTexture("/stacy/stacy.jpg");
  const { nodes, animations } = useGLTF("/stacy/stacy.glb");
  const { ref, actions, names } = useAnimations(animations);
  const [hovered, setHovered] = useState(false);
  const prevIndexRef = useRef(index);

  // Play animasi berdasarkan index
  useEffect(() => {
    const action = actions[names[index]];
    if (!action) return;

    // Jika bukan combo
    if (!queue || !queue.length) {
      action.reset();
      action.setLoop(THREE.LoopRepeat);
      action.clampWhenFinished = false;
      action.fadeIn(0.5).play();
      prevIndexRef.current = index;
    }

    return () => {
      action.fadeOut(0.5);
    };
  }, [index, actions, names, queue]);

  // Logic kalok ada combo
  useEffect(() => {
    if (!queue || !queue.length) return;

    let i = 0;
    let stopped = false;
    let timeoutId;

    const playNext = () => {
      if (stopped) return;

      const nextIndex = queue[i];
      const action = actions[names[nextIndex]];

      if (action) {
        setIndex(nextIndex);
        action.reset();
        action.setLoop(THREE.LoopOnce);
        action.clampWhenFinished = true;
        action.fadeIn(0.5).play();
        prevIndexRef.current = nextIndex;

        // convert durasi ke ms
        const duration = action.getClip().duration * 1000;
        timeoutId = setTimeout(() => {
          action.fadeOut(0.5);
          i++;

          if (i >= queue.length) {
            i = 0;
          }

          playNext();
        }, duration - 500);
        // }, duration - 500); -> ini untuk jeda fadeout
      }
    };

    playNext();

    return () => {
      stopped = true;
      clearTimeout(timeoutId);
    };
  }, [queue, actions, names, setIndex]);

  useFrame((state, delta) => {
    easing.damp3(halo.current.scale, hovered ? 1.15 : 1, 0.2, delta);
    easing.dampC(
      halo.current.material.color,
      hovered ? "hotpink" : "aquamarine",
      0.2,
      delta
    );
  });

  return (
    <group ref={ref} {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
        <primitive object={nodes.mixamorigHips} />
        <skinnedMesh
          castShadow
          receiveShadow
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          geometry={nodes.stacy.geometry}
          skeleton={nodes.stacy.skeleton}
          rotation={[-Math.PI / 2, 0, 0]}
          scale={100}
        >
          <meshStandardMaterial map={texture} map-flipY={false} skinning />
        </skinnedMesh>
      </group>
      <mesh ref={halo} receiveShadow position={[0, 1, -1]}>
        <circleGeometry args={[1, 64]} />
        <meshStandardMaterial />
      </mesh>
    </group>
  );
}

function LoaderOverlay() {
  const textRef = useRef();

  useFrame((_, delta) => {
    if (textRef.current) {
      textRef.current.rotation.y += delta * 0.5;
    }
  });

  return (
    <group position={[0, 1, 0]}>
      <mesh position={[0, 0, -0.1]}>
        <planeGeometry args={[6, 2]} />
        <meshBasicMaterial color="white" />
      </mesh>

      <Text3D
        ref={textRef}
        font="/fonts/helvetiker_regular.typeface.json"
        size={0.5}
        height={0.1}
        bevelEnabled
        bevelSize={0.02}
        bevelThickness={0.02}
      >
        Loading...
        <meshBasicMaterial color="black" />
      </Text3D>
    </group>
  );
}
